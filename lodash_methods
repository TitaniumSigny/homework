let _ = {

clamp(number, LowerBound, UpperBound) {
  if (number < LowerBound) {
    return LowerBound;
  }
  else if (number > UpperBound) {
    return UpperBound;
  }
  else return number;
},

inRange(number, StartValue, EndValue) {
  if (!EndValue) {
    // if EndValue is undefined
    EndValue = StartValue;
    StartValue = 0;
  }
  if (StartValue > EndValue) {
    let box = EndValue;
    EndValue = StartValue;
    StartValue = box;
  }
  if ( (number >= StartValue) && (number < EndValue)) {
    return true;
  }
  else return false;
},

words(TheString) {
  let array = TheString.split(' ');
  return array;
},

pad(TheString, length) {
  if (TheString.length >= length) {
    return TheString;
  }
  numSpacesFore = Math.floor((length - TheString.length) / 2);
  numSpacesAft = length - TheString.length - numSpacesFore;
  let outputString = ' '.repeat(numSpacesFore).concat(TheString).concat(' '.repeat(numSpacesAft));
  return outputString;
},

has(obj, attr) {
  if (obj[attr]) {
    return true;
  }
  else return false;
},

invert(obj) {
  let newObj = {};
  for(let item in obj) {
    const originalValue = obj[item];
    newObj[originalValue] = item;
  }
  return newObj;
},

findKey(obj, func) {
  for (let key in obj) {
    if (func(obj[key])) {return key};
  }
  return undefined;
},
// more efficient than the provided answer!

drop(array, num) {
  if (typeof num == 'undefined') {num = 1}
  let newArray = array.slice(num);
  return newArray;
},

};
